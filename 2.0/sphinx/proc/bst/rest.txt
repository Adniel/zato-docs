BST - REST API
==============

Overview
--------

Definitions and instances of :doc:`BST <./index>` can be output to diagrams through a REST API offering several endpoints
each driven by a set of parameters.

The API can be also used to accept calls from external applications outside of Zato that take part in BST-controlled processes.

Default user credentials to call the API are those set during :doc:`installation <./install>`.

All of the parameters endpoints accept can be provided either in URL query string or in JSON payload. The former
takes precedence in case of conflicts.

Visualizing diagrams and instances
----------------------------------

/bst/get-definition
~~~~~~~~~~~~~~~~~~~

Returns a BST definition as a diagram, JSON or plain text.

Input:

============ ======== ============= ================================================================================
Parameter    Required Default value Notes
============ ======== ============= ================================================================================
def_name     Yes      (None)        Name of the definition to return
def_version  ---      1             Version of the definition to return
format       ---      diagram-png   Ouput format, must be one of 'diagram-def', 'diagram-png', 'json', 'text'
node_width   ---      200           In PNG output, width of nodes in the tree of transitions, in pixels
orientation  ---      portrait      In PNG output, whether to lay out the diagram vertically or horizontally.
                                    Must be one of portrait or landscape.
============ ======== ============= ================================================================================

::

  # Redirect output to a file
  $ curl http://bst:$PWD@localhost:17010/bst/get-definition?def_name=Account > def.png
  $ 

.. image:: /gfx/proc/bst/open.account.def.png

Root nodes are indicated by the tilde *~* in text output:

::

  $ curl "http://bst:$PWD@localhost:17010/bst/get-definition?def_name=Account&format=text"
   * ~Consent given       -> Has account
   * Has account          -> Welcome message sent
  $

The same definition in JSON:

::

  $ curl "http://bst:$PWD@localhost:17010/bst/get-definition?def_name=Account&format=json"
  {
    "Account": {
      "objects": "Customer", 
      "Consent given": "Has account", 
      "Has account": "Welcome message sent"
    }
  }
  $ 

/bst/get-current-state-info
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns information on current state of a business object by its ID. In PNG output the state is highlighted. If there was
a previous state for this object, that state is highlighted as well.

For states that were :ref:`forcibly set <proc-bst-progguide-force>` for the object, *(f)* is appended to the state's name
to indicate the fact.

Input:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
object_type          Yes      (None)                Type of the object to return current state for
object_id            Yes      (None)                ID of the object to return current state for
format               ---      diagram-png           Output format, must be one of 'diagram-def', 'diagram-png', 'json'
def_name             ---      (None)                If the object belongs to more than one definition and providing the object's
                                                    name and ID could be ambiguous, def_name is the name of the definition
                                                    to return the state of the object's in
def_version          ---      (None)                Same as def_name but points to a definition's version
node_width           ---      200                   In PNG output, width of nodes in the tree of transitions, in pixels
orientation          ---      portrait              In PNG output, whether to lay out the diagram vertically or horizontally.
date_time_format     ---      %a %d/%m/%y %H:%M:%S  In PNG output, how to format date/time of transitions. Uses directives
                                                    Python's
                                                    `datetime.strftime <https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior>`_
                                                    uses.
time_zone            ---      UTC                   Time zone to output transition date/time in, such as EST or Europe/London.
                                                    Click here for the
                                                    `full list <https://github.com/zatosource/zato-labs/blob/master/bst/bst-tz.txt>`_
                                                    of values accepted.
highlight_color      ---      bccc73                Background color to highlight current and previous states with.
include_force_stop   ---      True                  If the definition contains any :ref:`forced stop states <proc-bst-author-force>`,
                                                    whether they should be included in PNG output or not.
==================== ======== ===================== ==========================================================================================================

The call with curl is split over two lines for clarity:

::

  $ curl "http://bst:$PWD@localhost:17010/bst/get-current-state-info?object_type=
    Customer&object_id=1&node_width=170&time_zone=EST" > cust.1.png
  $

.. image:: /gfx/proc/bst/cust_current.png

Integrating external applications
---------------------------------

/bst/can-transition
~~~~~~~~~~~~~~~~~~~

Returns information whether transition of an object to a new state from the current one is possible within the definition provided on input.

Input:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
object_type          Yes      (None)                Object type to dry-run the transition for
object_id            Yes      (None)                Object's ID
state_new            Yes      (None)                New state the object should attain
def_name             ---      (None)                If the object belongs to more than one definition, the definition's name
def_version          ---      1                     If the object belongs to more than one definition, the definition's version
force                ---      False                 Whether the transition should be :ref:`forced <proc-bst-progguide-force>`
==================== ======== ===================== ==========================================================================================================

Output:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
can_transition       Yes      (None)                Boolean True/False depending on whether the transition is feasible
state_old            Yes      (None)                Old state of the object after the transition, may be None/null if the new state is one of start ones
                                                    for the definition
state_new            Yes      (None)                Rewritten from request
reason               ---      (None)                If can_transition is False, the reason as to why the transition is not possible
==================== ======== ===================== ==========================================================================================================

::

  $ cat cust.json
  {
   "object_type":"Customer",
   "object_id":"2",
   "state_new":"Welcome message sent"
  }
  $

::

  $ curl http://bst:$PWD@localhost:17010/bst/can-transition -d @cust.json
  {"response":
   {
    "can_transition": false,
    "state_old": "Consent given",
    "state_new": "Welcome message sent",
    "reason": "No transition found from `Consent given` to \
     `Welcome message sent` for `Customer.2` in `Open.Account.v1`",
   }
  }
  $


/bst/transition
~~~~~~~~~~~~~~~

Performs a transition between states of a business object.

Input:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
object_type          Yes      (None)                (As in /bst/can-transition)
object_id            Yes      (None)                ″
state_new            Yes      (None)                ″
def_name             ---      (None)                ″
def_version          ---      1                     ″
force                ---      False                 ″
user_ctx             ---      (None)                An arbitrary string of opaque data to be attached to the transition
==================== ======== ===================== ==========================================================================================================

Output:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
can_transition       Yes      (None)                Boolean True/False depending on whether the transition is feasible
state_old            Yes      (None)                ″
state_new            Yes      (None)                ″
reason               ---      (None)                ″
==================== ======== ===================== ==========================================================================================================

::

  $ cat cust.json
  {
   "object_type":"Customer",
   "object_id":"2",
   "state_new":"Consent given"
  }
  $

::

  $ curl http://bst:$PWD@localhost:17010/bst/transition -d @cust.json
  {"response":
   {
    "can_transition": true,
    "state_old": null,
    "state_new": "Consent given",
    "reason": ""
    }
  }


/bst/mass-transition
~~~~~~~~~~~~~~~~~~~~

Performs a transition on each element from the input list. Each element's input format must be the same as in the
/bst/transition endpoint. Stops upon encountering first error, if any.

/bst/get-history
~~~~~~~~~~~~~~~~

Returns history of transitions for a given object.

Input:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
object_type          Yes      (None)                Object type to return the history for
object_id            Yes      (None)                Object's ID
==================== ======== ===================== ==========================================================================================================

Output:

==================== ======== ===================== ==========================================================================================================
Parameter            Required Default value         Notes
==================== ======== ===================== ==========================================================================================================
state_old            Yes      (None)                Object's state before the transition, possibly None/null.
state_current        Yes      (None)                Object's current state, never None/null.
transition_ts_utc    Yes      (None)                Transition's timestamp, in UTC.
def_tag              Yes      (None)                Object definition's tag - include the latter's name and version
object_tag           Yes      (None)                Object's tag - its name + ID
user_ctx             Yes      (None)                User context attached to the transition
server_ctx           Yes      (None)                Zato server's context attached automatically to the transition
is_forced            Yes      (None)                Whether the transition was :ref:`forced <proc-bst-progguide-force>`
==================== ======== ===================== ==========================================================================================================

::

  $ cat cust.json
  {
   "object_type":"Customer",
   "object_id":"1"
  }
  $

::

  $ curl http://bst:$PWD@localhost:17010/bst/get-history -d @cust.json
  [
    {
      "state_old": null, 
      "state_current": "Consent given", 
      "def_tag": "Open.Account.v1", 
      "object_tag": "Customer.1", 
      "transition_ts_utc": "2015-10-12T16:01:28.343996", 
      "user_ctx": "",
      "server_ctx": "",
      "is_forced": false
    }, 
    {
      "state_old": "Consent given", 
      "state_current": "Has account", 
      "def_tag": "Open.Account.v1", 
      "object_tag": "Customer.1", 
      "transition_ts_utc": "2015-10-12T16:01:37.026237", 
      "user_ctx": "",
      "server_ctx": "",
      "is_forced": false
    }, 
    {
      "state_old": "Has account", 
      "state_current": "Welcome message sent", 
      "def_tag": "Open.Account.v1", 
      "object_tag": "Customer.1", 
      "transition_ts_utc": "2015-10-12T16:01:51.746802", 
      "user_ctx": "",
      "server_ctx": "",
      "is_forced": false
    }
  ]
  $

/bst/get-definition-list
~~~~~~~~~~~~~~~~~~~~~~~~

Returns all BST definitions in a Zato cluster.

(No input parameters)

::

  $ curl http://bst:$PWD@localhost:17010/bst/get-definition-list
  [
    {
      "Account": {
        "objects": "Customer", 
        "Consent given": "Has account", 
        "Has account": "Welcome message sent"
      }
    }
  ]
  $